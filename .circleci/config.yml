version: 2.1

orbs:
  slack: circleci/slack@4.4.2
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Front end test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Back end test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Front end audit
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack/notify: 
          event: fail
          channel: cicd
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back end audit
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/notify: 
          event: fail
          channel: cicd
          template: basic_fail_1

  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      #enter here
      - run:
          name: Install tar/gzip utility
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Get the backend EC2 server's public hostname using AWS CLI
          command: |
            DNS=$(aws ec2 describe-instances --filters "Name=tag-key,Values=Name" --query "Reservations[*].Instances[*].[PublicDnsName]" --output text)
            echo $DNS
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "${DNS}" https://api.memstash.io/values/publicdns
      
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible/
            EC2DNS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/publicdns)
            echo $EC2DNS >> inventory.txt
            cat inventory.txt
            
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [75:a7:81:ac:34:ca:cf:57:89:57:06:d1:b4:9c:0e:b2]
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install ansible
            cat /.circleci/ansible/inventory.txt
            ansible --version
workflows:
  default:
    jobs:
      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]

